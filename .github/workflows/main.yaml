name: Mechanic Shop API CI

on:
  push:
    branches: ["main", "master"]
  pull_request:
    branches: ["main", "master"]

permissions:
  contents: read

jobs:
  test-sqlite:
    runs-on: ubuntu-latest

    # Make imports stable and force testing mode for the app factory
    env:
      PYTHONPATH: "."
      TESTING: "1"
      FLASK_ENV: testing
      # Use in-memory SQLite to avoid path issues. If you prefer a file, use: sqlite:///test_ci.db
      SQLALCHEMY_DATABASE_URI: "sqlite:///:memory:"
      # Safe defaults; GitHub Secrets override if set
      SECRET_KEY: ${{ secrets.SECRET_KEY || 'dev-secret' }}
      JWT_SECRET: ${{ secrets.JWT_SECRET || 'dev-jwt-secret' }}

    steps:
      - name: Check out repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Quick debug info
        run: |
          python - <<'PY'
          import sys, platform, os
          print("Python:", sys.version)
          print("Platform:", platform.platform())
          print("TESTING =", os.getenv("TESTING"))
          print("FLASK_ENV =", os.getenv("FLASK_ENV"))
          print("SQLALCHEMY_DATABASE_URI =", os.getenv("SQLALCHEMY_DATABASE_URI"))
          PY
          echo "Repo root: $GITHUB_WORKSPACE"
          ls -la

      - name: Sanity check app config
        run: |
          python - <<'PY'
          from application import create_app
          app = create_app()  # should auto-pick TestingConfig when TESTING=1
          with app.app_context():
              print("Loaded DB:", app.config["SQLALCHEMY_DATABASE_URI"])
              print("TESTING:", app.config["TESTING"])
          PY

      # Optional: explicitly init the test DB once (harmless if your tests already do this)
      - name: Initialize test DB
        run: |
          python - <<'PY'
          from application import create_app
          from application.extensions import db
          app = create_app()
          with app.app_context():
              db.drop_all()
              db.create_all()
              print("DB initialized")
          PY

      - name: Run unit tests
        run: |
          python -m unittest discover -s tests -p "test_*.py" -t . -v

deploy:
  needs: test
  runs-on: ubuntu-latest

  steps:
    - name: Check out Code
      uses: actions/checkout@v4

    - name: set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"
    
    - name: Create virtual environment
      run: |
        python -m venv venv
        source venv/bin/activate

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install -r requirements.txt

    - name: Deploy to production
        uses: johnbeynon/render-deploy-action@v0.0.8
        with:
          service-id: ${{ secrets.SERVICE_ID }} 
          api-key: ${{ secrets.RENDER_API_KEY }}   
